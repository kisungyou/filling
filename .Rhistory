image(fill2$X, col=gray((0:100)/100), axes=FALSE, main="Rank 50")
image(fill3$X, col=gray((0:100)/100), axes=FALSE, main="Rank 100")
rm(list=ls())
data(lena128)
## transform 5% of entries into missing
A <- aux.rndmissing(lena128, x=0.05)
## apply the method with 3 rank conditions
fill1 <- fill.KNNimpute(A, k=10)
## transform 5% of entries into missing
library(filling)
A <- aux.rndmissing(lena128, x=0.05)
## apply the method with 3 rank conditions
fill1 <- fill.KNNimpute(A, k=10)
fill2 <- fill.KNNimpute(A, k=50)
fill3 <- fill.KNNimpute(A, k=100)
## visualize only the last ones from each run
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$X, col=gray((0:100)/100), axes=FALSE, main="Rank 10")
image(fill2$X, col=gray((0:100)/100), axes=FALSE, main="Rank 50")
image(fill3$X, col=gray((0:100)/100), axes=FALSE, main="Rank 100")
x11()
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$X, col=gray((0:100)/100), axes=FALSE, main="Rank 10")
image(fill2$X, col=gray((0:100)/100), axes=FALSE, main="Rank 50")
image(fill3$X, col=gray((0:100)/100), axes=FALSE, main="Rank 100")
norm(fill1$X-fill2$X)
## load image data of 'lena64'
data(lena64)
## transform 5% of entries into missing
A <- aux.rndmissing(lena64, x=0.05)
## apply the method with 3 rank conditions
fill1 <- fill.KNNimpute(A, k=10)
fill2 <- fill.KNNimpute(A, k=50)
fill3 <- fill.KNNimpute(A, k=100)
## visualize only the last ones from each run
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$X, col=gray((0:100)/100), axes=FALSE, main="10-neighbor")
image(fill2$X, col=gray((0:100)/100), axes=FALSE, main="50-neighbor")
image(fill3$X, col=gray((0:100)/100), axes=FALSE, main="100-neighbor")
data(lena64)
## transform 5% of entries into missing
A <- aux.rndmissing(lena64, x=0.05)
## apply the method with 3 rank conditions
fill1 <- fill.KNNimpute(A, k=10)
fill2 <- fill.KNNimpute(A, k=50)
fill3 <- fill.KNNimpute(A, k=100)
data(lena64)
## transform 5% of entries into missing
A <- aux.rndmissing(lena64, x=0.05)
## apply the method with 3 rank conditions
fill1 <- fill.KNNimpute(A, k=5)
fill2 <- fill.KNNimpute(A, k=10)
fill3 <- fill.KNNimpute(A, k=20)
## visualize only the last ones from each run
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$X, col=gray((0:100)/100), axes=FALSE, main="10-neighbor")
image(fill2$X, col=gray((0:100)/100), axes=FALSE, main="50-neighbor")
image(fill3$X, col=gray((0:100)/100), axes=FALSE, main="100-neighbor")
data(lena128)
## transform 5% of entries into missing
A <- aux.rndmissing(lena128, x=0.05)
## apply the method with 3 rank conditions
fill1 <- fill.KNNimpute(A, k=5)
fill2 <- fill.KNNimpute(A, k=25)
fill3 <- fill.KNNimpute(A, k=50)
## visualize only the last ones from each run
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$X, col=gray((0:100)/100), axes=FALSE, main="5-neighbor")
image(fill2$X, col=gray((0:100)/100), axes=FALSE, main="25-neighbor")
image(fill3$X, col=gray((0:100)/100), axes=FALSE, main="50-neighbor")
sample(1:10, replace=TRUE)
sample(1:10, replace=FALSE)
length(sample(1:10, replace=TRUE))
length(sample(1:10, replace=FALSE))
length(unique(sample(1:10, replace=FALSE)))
length(unique(sample(1:10, replace=FALSE)))
length(unique(sample(1:10, replace=FALSE)))
length(unique(sample(1:10, replace=FALSE)))
length(unique(sample(1:10, replace=FALSE)))
length(unique(sample(1:10, replace=FALSE)))
length(unique(sample(1:10, replace=FALSE)))
length(unique(sample(1:10, replace=FALSE)))
library(filling)
?fill.simple
sum(is.na(A))
X = A
idxmiss = list()
for (i in 1:N){
idxmiss[[i]] = which(is.na(X[i,]))
}
N = nrow(X)
P = ncol(X)
idxmiss = list()
for (i in 1:N){
idxmiss[[i]] = which(is.na(X[i,]))
}
Xold = fill.simple(X, method="mean")$X
inctol = 10000.0
iter   = 0;
Vk = RSpectra::svds(Xold, k)
k=3
Vk = RSpectra::svds(Xold, k)
names(Vk)
Vk = RSpectra::svds(Xold, k)$v
dim(Vk)
?norm
?norm
?norm
?solve
?lm
x = rnorm(10)
b = x
b
b = rnorm(10)
A = matrix(rnorm(10*4),nrow=10)
xx = lm(b~A)
xx$coefficients
xx = lm(b~-1+A)
xx$coefficients
b2 = c(b,1)
lm(b2~A)
vector(xx$coefficients)
xx$coefficients
as.vector(xx$coefficients)
library(filling)
## load image data of 'lena128'
data(lena128)
## transform 5% of entries into missing
A <- aux.rndmissing(lena128, x=0.05)
## apply the method with 3 rank conditions
fill1 <- fill.SVDimpute(A, k=5)
fill2 <- fill.SVDimpute(A, k=25)
fill3 <- fill.SVDimpute(A, k=50)
## visualize only the last ones from each run
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$X, col=gray((0:100)/100), axes=FALSE, main="5-neighbor")
image(fill2$X, col=gray((0:100)/100), axes=FALSE, main="25-neighbor")
image(fill3$X, col=gray((0:100)/100), axes=FALSE, main="50-neighbor")
x11()
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$X, col=gray((0:100)/100), axes=FALSE, main="5-neighbor")
image(fill2$X, col=gray((0:100)/100), axes=FALSE, main="25-neighbor")
image(fill3$X, col=gray((0:100)/100), axes=FALSE, main="50-neighbor")
library(filling)
library(filling)
## load image data of 'lena128'
data(lena128)
## transform 5% of entries into missing
A <- aux.rndmissing(lena128, x=0.05)
## apply the method with 3 different number of regressors
fill1 <- fill.SVDimpute(A, k=5)
fill2 <- fill.SVDimpute(A, k=25)
fill3 <- fill.SVDimpute(A, k=50)
## visualize only the last ones from each run
x11()
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$X, col=gray((0:100)/100), axes=FALSE, main="5 regressors")
image(fill2$X, col=gray((0:100)/100), axes=FALSE, main="25 regressors")
image(fill3$X, col=gray((0:100)/100), axes=FALSE, main="50 regressors")
ls("package:filling")
ls("package:filling")[2:10]
ls("package:filling")[2:9]
9-2+1
library(filling)
library(filling)
library(filling)
library(filling)
ls("package:filling")
library(filling)
?fill.HardImpute
data(lena128)
## transform 5% of entries into missing
A <- aux.rndmissing(lena128, x=0.05)
## apply the method with 3 lambda values
fill <- fill.SoftImpute(A, lambdas=c(500,100,50))
## visualize
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill$X[,,1], col=gray((0:100)/100), axes=FALSE, main="lbd=500")
image(fill$X[,,2], col=gray((0:100)/100), axes=FALSE, main="lbd=100")
image(fill$X[,,3], col=gray((0:100)/100), axes=FALSE, main="lbd=50")
library(filling)
library(filling)
## load image data of 'lena128'
data(lena128)
## transform 5% of entries into missing
A <- aux.rndmissing(lena128, x=0.05)
## apply the method with 3 different neighborhood size
fill1 <- fill.KNNimpute(A, k=5)
fill2 <- fill.KNNimpute(A, k=25)
fill3 <- fill.KNNimpute(A, k=50)
## visualize only the last ones from each run
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$X, col=gray((0:100)/100), axes=FALSE, main="5-neighbor")
image(fill2$X, col=gray((0:100)/100), axes=FALSE, main="25-neighbor")
image(fill3$X, col=gray((0:100)/100), axes=FALSE, main="50-neighbor")
data(lena128)
## transform 5% of entries into missing
set.seed(5)
A <- aux.rndmissing(lena128, x=0.05)
## apply the method with 3 different neighborhood size
fill1 <- fill.KNNimpute(A, k=5)
fill2 <- fill.KNNimpute(A, k=25)
fill3 <- fill.KNNimpute(A, k=50)
## visualize only the last ones from each run
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$X, col=gray((0:100)/100), axes=FALSE, main="5-neighbor")
image(fill2$X, col=gray((0:100)/100), axes=FALSE, main="25-neighbor")
image(fill3$X, col=gray((0:100)/100), axes=FALSE, main="50-neighbor")
data(lena128)
## transform 5% of entries into missing
set.seed(5)
A <- aux.rndmissing(lena128, x=0.05)
## apply the method with 3 different number of regressors
fill1 <- fill.SVDimpute(A, k=5)
fill2 <- fill.SVDimpute(A, k=25)
fill3 <- fill.SVDimpute(A, k=50)
## visualize only the last ones from each run
x11()
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$X, col=gray((0:100)/100), axes=FALSE, main="5 regressors")
image(fill2$X, col=gray((0:100)/100), axes=FALSE, main="25 regressors")
image(fill3$X, col=gray((0:100)/100), axes=FALSE, main="50 regressors")
library(filling)
library(filling)
library(filling)
library(filling)
cat("/f")
cat("f")
cat("\f")
library(filling)
library(filling)
library(filling)
library(filling)
data(lena128)
## transform 5% of entries into missing
set.seed(5)
A <- aux.rndmissing(lena128, x=0.05)
A
max(A)
min(A)
max(A(!is.na(A)))
max(A[!is.na(A)])
?stp
?stop
?warning
?fill.SVT
A
A/10
A = matrix(rnorm(10*5),nrow=10)
svd(A)
data(lena128)
## transform 5% of entries into missing
set.seed(5)
A <- aux.rndmissing(lena128, x=0.05)
scaler = max(c(abs(max(X[!is.na(X)])), abs(min(X[!is.na(X)]))))*1.01
# 2. size must be (mxn) with m <= n
if (nrow(X) > ncol(X)){
tflag = TRUE   # must be transposed later
X     = t(X)
} else {
tflag = FALSE
}
# 3. size parameters
m = nrow(X)
n = ncol(X)
# 4. rescaling of the data
M = X/scaler
##############################################################
# Main Computation as in Paper, under $1.2
# Step 1.
Y = M
Y[is.na(M)] = 0.0
X = A
##############################################################
# Preparation Step
# 1. scaling : later the output must be rescaled back : bounded by abs <= 1
scaler = max(c(abs(max(X[!is.na(X)])), abs(min(X[!is.na(X)]))))*1.01
# 2. size must be (mxn) with m <= n
if (nrow(X) > ncol(X)){
tflag = TRUE   # must be transposed later
X     = t(X)
} else {
tflag = FALSE
}
# 3. size parameters
m = nrow(X)
n = ncol(X)
# 4. rescaling of the data
M = X/scaler
##############################################################
# Main Computation as in Paper, under $1.2
# Step 1.
Y = M
Y[is.na(M)] = 0.0
Y
max(A)
min(A[!is.na(A)])
Y
max(Y)
min(Y)
svdY = svd(Y)
?svd
dim(A)
length(A)
128*128
# (3) proportion of observed values of X
phat = (sum(!is.na(A))/length(A))
phat
eta = 0.1
thrval = ((2+eta)*sqrt(n*phat))
thrval
S      = (svdY$d >= phat)
S
svdY
svdY$d
length(svdY$d)
W = (svdY$u[,S]%*%diag(svdY$d[S])%*%t(svdY$v[,S]))/phat
W
matrix(3,c(1,2))
array(3,c(1,2))
##############################################################
# Preparation Step
# 1. scaling : later the output must be rescaled back : bounded by abs <= 1
a = min(X[!is.na(X)])
b = max(X[!is.na(X)])
# 2. size must be (mxn) with m <= n
if (nrow(X) > ncol(X)){
tflag = TRUE   # must be transposed later
X     = t(X)
} else {
tflag = FALSE
}
# 3. size parameters
m = nrow(X)
n = ncol(X)
# 4. rescaling of the data
M = ((X - array((a+b)/2, c(m,n)))/((b-a)/2))
##############################################################
# Main Computation as in Paper, under $1.2
# (1) fill in the proxy Y
Y = M
Y[is.na(M)] = 0.0
# (2) singular value decomposition
svdY = svd(Y)
s    = svdY$d
# (3) proportion of observed values of X
phat = (sum(!is.na(A))/length(A))
# (4) thresholding value
thrval = ((2+eta)*sqrt(n*phat))
S      = (svdY$d >= phat)
# (5) Define W
W = (svdY$u[,S]%*%diag(svdY$d[S])%*%t(svdY$v[,S]))/phat
library(filling)
library(filling)
## load image data of 'lena128'
data(lena128)
## transform 5% of entries into missing
set.seed(5)
A <- aux.rndmissing(lena128, x=0.05)
## apply the method with 3 different control 'eta'
fill1 <- fill.USVT(A, eta=0.01)
fill2 <- fill.USVT(A, eta=0.1)
fill3 <- fill.USVT(A, eta=0.5)
## visualize only the last ones from each run
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$Ahat, col=gray((0:100)/100), axes=FALSE, main="eta=0.01")
image(fill2$Ahat, col=gray((0:100)/100), axes=FALSE, main="eta=0.1")
image(fill3$Ahat, col=gray((0:100)/100), axes=FALSE, main="eta=0.5")
fill1
is.list(fill1)
library(filling)
library(filling)
## apply the method with 3 different control 'eta'
fill1 <- fill.USVT(A, eta=0.01)
fill2 <- fill.USVT(A, eta=0.1)
fill3 <- fill.USVT(A, eta=0.5)
## visualize only the last ones from each run
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$Ahat, col=gray((0:100)/100), axes=FALSE, main="eta=0.01")
image(fill2$Ahat, col=gray((0:100)/100), axes=FALSE, main="eta=0.1")
image(fill3$Ahat, col=gray((0:100)/100), axes=FALSE, main="eta=0.5")
x11()
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$Ahat, col=gray((0:100)/100), axes=FALSE, main="eta=0.01")
image(fill2$Ahat, col=gray((0:100)/100), axes=FALSE, main="eta=0.1")
image(fill3$Ahat, col=gray((0:100)/100), axes=FALSE, main="eta=0.5")
size(lena128)
dim(lena128)
range(fill1)
is.list(fill1)
range(fill1$Ahat)
range(A)
min(A[!is.na(A)])
max(A[!is.na(A)])
## load image data of 'lena128'
data(lena128)
## transform 5% of entries into missing
set.seed(5)
A <- aux.rndmissing(lena128, x=0.05)
## apply the method with 3 different control 'eta'
fill1 <- fill.USVT(A, eta=0.01)
fill2 <- fill.USVT(A, eta=0.5)
fill3 <- fill.USVT(A, eta=0.99)
## visualize only the last ones from each run
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$Ahat, col=gray((0:100)/100), axes=FALSE, main="eta=0.01")
image(fill2$Ahat, col=gray((0:100)/100), axes=FALSE, main="eta=0.5")
image(fill3$Ahat, col=gray((0:100)/100), axes=FALSE, main="eta=0.99")
x11()
## apply the method with 3 different control 'eta'
fill1 <- fill.USVT(A, eta=0.01)
fill2 <- fill.USVT(A, eta=0.5)
fill3 <- fill.USVT(A, eta=0.99)
## visualize only the last ones from each run
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$Ahat, col=gray((0:100)/100), axes=FALSE, main="eta=0.01")
image(fill2$Ahat, col=gray((0:100)/100), axes=FALSE, main="eta=0.5")
image(fill3$Ahat, col=gray((0:100)/100), axes=FALSE, main="eta=0.99")
library(filling)
data(lena128)
## transform 5% of entries into missing
set.seed(5)
A <- aux.rndmissing(lena128, x=0.10)
## apply the method with 3 different control 'eta'
fill1 <- fill.USVT(A, eta=0.01)
fill2 <- fill.USVT(A, eta=0.5)
fill3 <- fill.USVT(A, eta=0.99)
## visualize only the last ones from each run
x11()
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$Ahat, col=gray((0:100)/100), axes=FALSE, main="eta=0.01")
image(fill2$Ahat, col=gray((0:100)/100), axes=FALSE, main="eta=0.5")
image(fill3$Ahat, col=gray((0:100)/100), axes=FALSE, main="eta=0.99")
library(Matrix)
rankMatrix(A)
rankMatrix(lena128)
library(filling)
library(filling)
library(filling)
library(filling)
pack <- "filling"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
library(filling)
library(filling)
pack <- "filling"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
library(filling)
pack <- "filling"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
library(filling)
pack <- "filling"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
library(filling)
pack <- "filling"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
library(filling)
pack <- "filling"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
library(filling)
library(filling)
library(filling)
pack <- "filling"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
library(filling)
pack <- "filling"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
pack <- "filling"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
library(filling)
pack <- "filling"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
??packageVersion
packageVersion("CovTools")
library(filling)
