image(fill3$X, col=gray((0:100)/100), axes=FALSE, main="processed")
x11()
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$X, col=gray((0:100)/100), axes=FALSE, main="processed")
image(fill2$X, col=gray((0:100)/100), axes=FALSE, main="processed")
image(fill3$X, col=gray((0:100)/100), axes=FALSE, main="processed")
library(filling)
library(filling)
library(filling)
library(filling)
?fill.nSVD
library(filling)
pack="filling"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
library(filling)
library(filling)
library(filling)
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
?fill.nuclear
library(filling)
library(filling)
?sort
library(filling)
data(lena128)
## transform 5% of entries into missing
A <- aux.rndmissing(lena128, x=0.05)
## apply the method
fill <- fill.SoftImpute(A)
X = fill$X
dim(X)
Y = X[,,1]
dim(Y)
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill$X[,,1], col=gray((0:100)/100), axes=FALSE, main="lbd=0.1")
image(fill$X[,,2], col=gray((0:100)/100), axes=FALSE, main="lbd=1")
image(fill$X[,,3], col=gray((0:100)/100), axes=FALSE, main="lbd=10")
a = fill$X[,,1]
b = fill$X[,,2]
c = fill$X[,,3]
norm(a-b)
norm(b-c)
norm(a-b)
sum(a==b)
x11()
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill$X[,,1], col=gray((0:100)/100), axes=FALSE, main="lbd=0.1")
image(fill$X[,,2], col=gray((0:100)/100), axes=FALSE, main="lbd=1")
image(fill$X[,,3], col=gray((0:100)/100), axes=FALSE, main="lbd=10")
library(filling)
library(filling)
## load image data of 'lena128'
data(lena128)
## transform 5% of entries into missing
A <- aux.rndmissing(lena128, x=0.05)
## apply the method with 3 lambda values
fill <- fill.SoftImpute(A)
## visualize
x11()
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill$X[,,1], col=gray((0:100)/100), axes=FALSE, main="lbd=0.1")
image(fill$X[,,2], col=gray((0:100)/100), axes=FALSE, main="lbd=1")
image(fill$X[,,3], col=gray((0:100)/100), axes=FALSE, main="lbd=10")
range(as.vector(lena128))
Y = as.double(lena128)
Y
A
norm(fill$X[,,1])
norm(fill$X[,,2])
norm(fill$X[,,3])
sum(svd(fill$X[,,1])$d)
sum(svd(fill$X[,,u])$d)
sum(svd(fill$X[,,2])$d)
sum(svd(fill$X[,,3])$d)
## load image data of 'lena128'
data(lena128)
## transform 5% of entries into missing
A <- aux.rndmissing(lena128, x=0.05)
## apply the method with 3 lambda values
fill <- fill.SoftImpute(A)
## visualize
x11()
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill$X[,,1], col=gray((0:100)/100), axes=FALSE, main="lbd=0.1")
image(fill$X[,,2], col=gray((0:100)/100), axes=FALSE, main="lbd=1")
image(fill$X[,,3], col=gray((0:100)/100), axes=FALSE, main="lbd=10")
image(fill$X[,,1]-fill$X[,,2])
svd(lena128)$d[1:10]
## load image data of 'lena128'
data(lena128)
## transform 5% of entries into missing
A <- aux.rndmissing(lena128, x=0.05)
## apply the method with 3 lambda values
fill <- fill.SoftImpute(A, lambdas=c(500,200,100,50,10))
## visualize
x11()
par(mfrow=c(2,3), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill$X[,,1], col=gray((0:100)/100), axes=FALSE, main="lbd=0.1")
image(fill$X[,,2], col=gray((0:100)/100), axes=FALSE, main="lbd=1")
image(fill$X[,,3], col=gray((0:100)/100), axes=FALSE, main="lbd=10")
image(fill$X[,,4], col=gray((0:100)/100), axes=FALSE, main="lbd=10")
image(fill$X[,,5], col=gray((0:100)/100), axes=FALSE, main="lbd=10")
graphics.off()
library(filling)
## load image data of 'lena128'
data(lena128)
## transform 5% of entries into missing
A <- aux.rndmissing(lena128, x=0.05)
## apply the method with 3 lambda values
fill <- fill.SoftImpute(A, lambdas=c(500,100,50))
## visualize
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill$X[,,1], col=gray((0:100)/100), axes=FALSE, main="lbd=500")
image(fill$X[,,2], col=gray((0:100)/100), axes=FALSE, main="lbd=100")
image(fill$X[,,3], col=gray((0:100)/100), axes=FALSE, main="lbd=50")
require(Matrix)
rankMatrix(lena128)
dim(lena128)
library(filling)
## load image data of 'lena128'
data(lena128)
## transform 5% of entries into missing
A <- aux.rndmissing(lena128, x=0.05)
## apply the method with 3 rank conditions
fill1 <- fill.Hardimpute(A, lambdas=c(500,100,50), rk=10)
fill2 <- fill.Hardimpute(A, lambdas=c(500,100,50), rk=50)
fill3 <- fill.Hardimpute(A, lambdas=c(500,100,50), rk=100)
## visualize
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$X[,,3], col=gray((0:100)/100), axes=FALSE, main="lbd=500")
image(fill2$X[,,3], col=gray((0:100)/100), axes=FALSE, main="lbd=100")
image(fill3$X[,,3], col=gray((0:100)/100), axes=FALSE, main="lbd=50")
A <- aux.rndmissing(lena128, x=0.05)
## apply the method with 3 rank conditions
fill1 <- fill.HardImpute(A, lambdas=c(500,100,50), rk=10)
library(filling)
fill1 <- fill.HardImpute(A, lambdas=c(500,100,50), rk=10)
fill1 <- fill.HardImpute(A, lambdas=c(500,100,50), rk=10)
library(filling)
library(filling)
data(lena128)
## transform 5% of entries into missing
A <- aux.rndmissing(lena128, x=0.05)
## apply the method with 3 rank conditions
fill1 <- fill.HardImpute(A, lambdas=c(500,100,50), rk=10)
fill2 <- fill.HardImpute(A, lambdas=c(500,100,50), rk=50)
fill3 <- fill.HardImpute(A, lambdas=c(500,100,50), rk=100)
## visualize
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$X[,,3], col=gray((0:100)/100), axes=FALSE, main="lbd=500")
image(fill2$X[,,3], col=gray((0:100)/100), axes=FALSE, main="lbd=100")
image(fill3$X[,,3], col=gray((0:100)/100), axes=FALSE, main="lbd=50")
x11()
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$X[,,3], col=gray((0:100)/100), axes=FALSE, main="Rank 10")
image(fill2$X[,,3], col=gray((0:100)/100), axes=FALSE, main="Rank 50")
image(fill3$X[,,3], col=gray((0:100)/100), axes=FALSE, main="Rank 100")
install.packages("RANN")
A
which(is.na(A))
?which
which(is.na(A), arr.ind=TRUE)
install.packages("nabor")
X = A
idxmiss = which(is.na(X), arr.ind=TRUE)
dim(idxmiss)
idxall = which(X==1)
idxall
nrow(idxall)
(nrow(idxall)==NULL)
(nrow(idxall)==0)
length(nrow(idxall))
which(!is.na(X[,1]))
require(nabor)
?nabor
knn(data=X,query=rnorm(ncol(X)))
knn(data=X,query=rnorm(ncol(X)),2)
knn(data=X,query=rnorm(ncol(X)),k=3)
knn(data=X,query=matrix(rnorm(ncol(X)),ncol=ncol(X)),k=3)
knn(data=X,query=X[1,],k=3)
knn(data=X,query=matrix(X[1,],ncol=ncol(X)),k=3)
knn(data=lena128, query=matrix(lena128[1,],ncol=128), k=3)
idxmiss = which(is.na(X), arr.ind=TRUE)
if (length(nrow(idxmiss))==0){stop("* fill.KNNimpute : there is no missing entries.")}
i=1
crow = idxmiss[i,1]
ccol = idxmiss[i,2]
ccol_obs = which(!is.na(X[,ccol])) # in the same column - this will be used later for weighting
crow_obs = which(!is.na(X[crow,])) # in the same row
part_query = X[crow,crow_obs]
partX    = X[ccol_obs,crow_obs]
length(part_query)
dim(partX)
ccol_obs = which(!is.na(X[,ccol])) # in the same column - this will be used later for weighting
crow_obs = which(!is.na(X[crow,])) # in the same row
part_query = X[crow,crow_obs]
part_data  = X[ccol_obs,crow_obs]
part_knn = nabor::knn(part_data, query=part_query)
part_knn = nabor::knn(part_data, query=matrix(part_query,ncol=length(part_query)), min(k,length(ccol_obs)))
k=3
part_knn = nabor::knn(part_data, query=matrix(part_query,ncol=length(part_query)), min(k,length(ccol_obs)))
part_knn
part_query
part_data
obsrows = which(!is.na(X[,ccol]))
obsrows
X[obsrows,ccol]
obsrows[-1]
A = matrix(rnorm(24),nrow=4)
A[2,3]=NA
A[3,5]=NA
A
colSums(A)
?union
?knn
mat = A
rowvec = rnorm(6)
col_matmiss = which(is.na(colSums(mat)))
col_vecmiss = which(is.na(rowvec))
all_missing = union(col_matmiss, col_vecmiss)
rowvec[3]=NA
rowvec[2]=NA
rowvec
col_matmiss = which(is.na(colSums(mat)))
col_vecmiss = which(is.na(rowvec))
all_missing = union(col_matmiss, col_vecmiss)
all_missing
newvec = rowvec[-all_missing]
newmat = mat[,-all_missing]
newvec
newmat
park=3
newknn = nabor::knn(newmat, query=matrix(newvec,ncol=length(newvec)), park)
newknn
knnidx    = newknn$nn.idx
knndistinv = 1/newknn$nn.dists
knnweight = knndistinv/sum(knndistinv)
knnweight
colidx=2
solution = sum(as.vector(mat[knnidx, colidx])*knnweight)
solution
library(filling)
library(filling)
data(lena128)
## transform 5% of entries into missing
A <- aux.rndmissing(lena128, x=0.05)
## apply the method with 3 rank conditions
fill1 <- fill.KNNimpute(A, k=10)
fill2 <- fill.KNNimpute(A, k=50)
fill3 <- fill.KNNimpute(A, k=100)
## visualize only the last ones from each run
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$X, col=gray((0:100)/100), axes=FALSE, main="Rank 10")
image(fill2$X, col=gray((0:100)/100), axes=FALSE, main="Rank 50")
image(fill3$X, col=gray((0:100)/100), axes=FALSE, main="Rank 100")
rm(list=ls())
data(lena128)
## transform 5% of entries into missing
A <- aux.rndmissing(lena128, x=0.05)
## apply the method with 3 rank conditions
fill1 <- fill.KNNimpute(A, k=10)
## transform 5% of entries into missing
library(filling)
A <- aux.rndmissing(lena128, x=0.05)
## apply the method with 3 rank conditions
fill1 <- fill.KNNimpute(A, k=10)
fill2 <- fill.KNNimpute(A, k=50)
fill3 <- fill.KNNimpute(A, k=100)
## visualize only the last ones from each run
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$X, col=gray((0:100)/100), axes=FALSE, main="Rank 10")
image(fill2$X, col=gray((0:100)/100), axes=FALSE, main="Rank 50")
image(fill3$X, col=gray((0:100)/100), axes=FALSE, main="Rank 100")
x11()
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$X, col=gray((0:100)/100), axes=FALSE, main="Rank 10")
image(fill2$X, col=gray((0:100)/100), axes=FALSE, main="Rank 50")
image(fill3$X, col=gray((0:100)/100), axes=FALSE, main="Rank 100")
norm(fill1$X-fill2$X)
## load image data of 'lena64'
data(lena64)
## transform 5% of entries into missing
A <- aux.rndmissing(lena64, x=0.05)
## apply the method with 3 rank conditions
fill1 <- fill.KNNimpute(A, k=10)
fill2 <- fill.KNNimpute(A, k=50)
fill3 <- fill.KNNimpute(A, k=100)
## visualize only the last ones from each run
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$X, col=gray((0:100)/100), axes=FALSE, main="10-neighbor")
image(fill2$X, col=gray((0:100)/100), axes=FALSE, main="50-neighbor")
image(fill3$X, col=gray((0:100)/100), axes=FALSE, main="100-neighbor")
data(lena64)
## transform 5% of entries into missing
A <- aux.rndmissing(lena64, x=0.05)
## apply the method with 3 rank conditions
fill1 <- fill.KNNimpute(A, k=10)
fill2 <- fill.KNNimpute(A, k=50)
fill3 <- fill.KNNimpute(A, k=100)
data(lena64)
## transform 5% of entries into missing
A <- aux.rndmissing(lena64, x=0.05)
## apply the method with 3 rank conditions
fill1 <- fill.KNNimpute(A, k=5)
fill2 <- fill.KNNimpute(A, k=10)
fill3 <- fill.KNNimpute(A, k=20)
## visualize only the last ones from each run
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$X, col=gray((0:100)/100), axes=FALSE, main="10-neighbor")
image(fill2$X, col=gray((0:100)/100), axes=FALSE, main="50-neighbor")
image(fill3$X, col=gray((0:100)/100), axes=FALSE, main="100-neighbor")
data(lena128)
## transform 5% of entries into missing
A <- aux.rndmissing(lena128, x=0.05)
## apply the method with 3 rank conditions
fill1 <- fill.KNNimpute(A, k=5)
fill2 <- fill.KNNimpute(A, k=25)
fill3 <- fill.KNNimpute(A, k=50)
## visualize only the last ones from each run
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$X, col=gray((0:100)/100), axes=FALSE, main="5-neighbor")
image(fill2$X, col=gray((0:100)/100), axes=FALSE, main="25-neighbor")
image(fill3$X, col=gray((0:100)/100), axes=FALSE, main="50-neighbor")
sample(1:10, replace=TRUE)
sample(1:10, replace=FALSE)
length(sample(1:10, replace=TRUE))
length(sample(1:10, replace=FALSE))
length(unique(sample(1:10, replace=FALSE)))
length(unique(sample(1:10, replace=FALSE)))
length(unique(sample(1:10, replace=FALSE)))
length(unique(sample(1:10, replace=FALSE)))
length(unique(sample(1:10, replace=FALSE)))
length(unique(sample(1:10, replace=FALSE)))
length(unique(sample(1:10, replace=FALSE)))
length(unique(sample(1:10, replace=FALSE)))
library(filling)
?fill.simple
sum(is.na(A))
X = A
idxmiss = list()
for (i in 1:N){
idxmiss[[i]] = which(is.na(X[i,]))
}
N = nrow(X)
P = ncol(X)
idxmiss = list()
for (i in 1:N){
idxmiss[[i]] = which(is.na(X[i,]))
}
Xold = fill.simple(X, method="mean")$X
inctol = 10000.0
iter   = 0;
Vk = RSpectra::svds(Xold, k)
k=3
Vk = RSpectra::svds(Xold, k)
names(Vk)
Vk = RSpectra::svds(Xold, k)$v
dim(Vk)
?norm
?norm
?norm
?solve
?lm
x = rnorm(10)
b = x
b
b = rnorm(10)
A = matrix(rnorm(10*4),nrow=10)
xx = lm(b~A)
xx$coefficients
xx = lm(b~-1+A)
xx$coefficients
b2 = c(b,1)
lm(b2~A)
vector(xx$coefficients)
xx$coefficients
as.vector(xx$coefficients)
library(filling)
## load image data of 'lena128'
data(lena128)
## transform 5% of entries into missing
A <- aux.rndmissing(lena128, x=0.05)
## apply the method with 3 rank conditions
fill1 <- fill.SVDimpute(A, k=5)
fill2 <- fill.SVDimpute(A, k=25)
fill3 <- fill.SVDimpute(A, k=50)
## visualize only the last ones from each run
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$X, col=gray((0:100)/100), axes=FALSE, main="5-neighbor")
image(fill2$X, col=gray((0:100)/100), axes=FALSE, main="25-neighbor")
image(fill3$X, col=gray((0:100)/100), axes=FALSE, main="50-neighbor")
x11()
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$X, col=gray((0:100)/100), axes=FALSE, main="5-neighbor")
image(fill2$X, col=gray((0:100)/100), axes=FALSE, main="25-neighbor")
image(fill3$X, col=gray((0:100)/100), axes=FALSE, main="50-neighbor")
library(filling)
library(filling)
## load image data of 'lena128'
data(lena128)
## transform 5% of entries into missing
A <- aux.rndmissing(lena128, x=0.05)
## apply the method with 3 different number of regressors
fill1 <- fill.SVDimpute(A, k=5)
fill2 <- fill.SVDimpute(A, k=25)
fill3 <- fill.SVDimpute(A, k=50)
## visualize only the last ones from each run
x11()
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$X, col=gray((0:100)/100), axes=FALSE, main="5 regressors")
image(fill2$X, col=gray((0:100)/100), axes=FALSE, main="25 regressors")
image(fill3$X, col=gray((0:100)/100), axes=FALSE, main="50 regressors")
ls("package:filling")
ls("package:filling")[2:10]
ls("package:filling")[2:9]
9-2+1
library(filling)
library(filling)
library(filling)
library(filling)
ls("package:filling")
library(filling)
?fill.HardImpute
data(lena128)
## transform 5% of entries into missing
A <- aux.rndmissing(lena128, x=0.05)
## apply the method with 3 lambda values
fill <- fill.SoftImpute(A, lambdas=c(500,100,50))
## visualize
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill$X[,,1], col=gray((0:100)/100), axes=FALSE, main="lbd=500")
image(fill$X[,,2], col=gray((0:100)/100), axes=FALSE, main="lbd=100")
image(fill$X[,,3], col=gray((0:100)/100), axes=FALSE, main="lbd=50")
library(filling)
library(filling)
## load image data of 'lena128'
data(lena128)
## transform 5% of entries into missing
A <- aux.rndmissing(lena128, x=0.05)
## apply the method with 3 different neighborhood size
fill1 <- fill.KNNimpute(A, k=5)
fill2 <- fill.KNNimpute(A, k=25)
fill3 <- fill.KNNimpute(A, k=50)
## visualize only the last ones from each run
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$X, col=gray((0:100)/100), axes=FALSE, main="5-neighbor")
image(fill2$X, col=gray((0:100)/100), axes=FALSE, main="25-neighbor")
image(fill3$X, col=gray((0:100)/100), axes=FALSE, main="50-neighbor")
data(lena128)
## transform 5% of entries into missing
set.seed(5)
A <- aux.rndmissing(lena128, x=0.05)
## apply the method with 3 different neighborhood size
fill1 <- fill.KNNimpute(A, k=5)
fill2 <- fill.KNNimpute(A, k=25)
fill3 <- fill.KNNimpute(A, k=50)
## visualize only the last ones from each run
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$X, col=gray((0:100)/100), axes=FALSE, main="5-neighbor")
image(fill2$X, col=gray((0:100)/100), axes=FALSE, main="25-neighbor")
image(fill3$X, col=gray((0:100)/100), axes=FALSE, main="50-neighbor")
data(lena128)
## transform 5% of entries into missing
set.seed(5)
A <- aux.rndmissing(lena128, x=0.05)
## apply the method with 3 different number of regressors
fill1 <- fill.SVDimpute(A, k=5)
fill2 <- fill.SVDimpute(A, k=25)
fill3 <- fill.SVDimpute(A, k=50)
## visualize only the last ones from each run
x11()
par(mfrow=c(2,2), pty="s")
image(A, col=gray((0:100)/100), axes=FALSE, main="5% missing")
image(fill1$X, col=gray((0:100)/100), axes=FALSE, main="5 regressors")
image(fill2$X, col=gray((0:100)/100), axes=FALSE, main="25 regressors")
image(fill3$X, col=gray((0:100)/100), axes=FALSE, main="50 regressors")
library(filling)
library(filling)
library(filling)
library(filling)
cat("/f")
cat("f")
cat("\f")
library(filling)
